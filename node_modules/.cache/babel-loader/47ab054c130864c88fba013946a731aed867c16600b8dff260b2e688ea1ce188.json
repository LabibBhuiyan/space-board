{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Banon\\\\Desktop\\\\space-board\\\\src\\\\components\\\\Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Board.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = () => {\n  _s();\n  const boardSize = 6;\n  const startingCoordinates = [0, 0];\n  const endingCoordinates = [boardSize - 1, boardSize - 1];\n  const teleportationSquares = [[1, 4], [4, 1]];\n  const magnetSquare = [[3, 5], [1, 2]];\n  const [playerCoordinates, setPlayerCoordinates] = useState(startingCoordinates);\n  const [rolledNumber, setRolledNumber] = useState(null);\n  const [isVictory, setIsVictory] = useState(false);\n  const [stepCount, setStepCount] = useState(0);\n  useEffect(() => {\n    const [playerRow, playerCol] = playerCoordinates;\n    if (playerRow >= endingCoordinates[0] && playerCol >= endingCoordinates[1]) {\n      setIsVictory(true);\n    } else {\n      setIsVictory(false);\n    }\n  }, [playerCoordinates, endingCoordinates]);\n  const rollDice = () => {\n    const number = Math.floor(Math.random() * 6) + 1;\n    setRolledNumber(number);\n    return number;\n  };\n  const movePlayer = () => {\n    let steps = rollDice();\n    const [currentRow, currentCol] = playerCoordinates;\n    let newRow = currentRow;\n    let newCol = currentCol + steps;\n    if (newCol >= boardSize) {\n      newRow += Math.floor(newCol / boardSize);\n      newCol %= boardSize;\n    }\n    if (newRow >= boardSize) {\n      newRow = boardSize - 1;\n      newCol = boardSize - 1;\n    }\n    if (isTeleportationSquare(newRow, newCol)) {\n      [newRow, newCol] = getTeleportationDestination(newRow, newCol);\n    }\n    if (isMagnetSquare(newRow, newCol)) {\n      const magnetIndex = magnetSquare.findIndex(magnet => magnet[0] === newRow && magnet[1] === newCol);\n      if (magnetIndex !== -1) {\n        const magnet = magnetSquare[magnetIndex];\n        const [magnetRow, magnetCol] = magnet;\n        const distance = Math.abs(currentRow - magnetRow) + Math.abs(currentCol - magnetCol);\n        steps = Math.max(steps - distance, 1);\n        newRow = magnetRow;\n        newCol = magnetCol;\n      }\n    }\n\n    // Delay the movement using setTimeout\n    setTimeout(() => {\n      setPlayerCoordinates([newRow, newCol]);\n      setStepCount(stepCount + steps);\n    }, 1000); // Set the delay duration in milliseconds (here, 1000ms = 1 second)\n\n    // Add a delay before adding the 'moving' class to trigger the animation\n    setTimeout(() => {\n      setPlayerCoordinates([currentRow, currentCol]); // Move the player to the new position instantly\n      setTimeout(() => {\n        setPlayerCoordinates([newRow, newCol]); // Move the player to the final position with animation\n      }, 0); // Allow a small delay to trigger the animation after the initial position is set\n    }, 100); // Set the delay duration in milliseconds (here, 100ms)\n  };\n\n  const isTeleportationSquare = (row, col) => {\n    return teleportationSquares.some(_ref => {\n      let [teleRow, teleCol] = _ref;\n      return teleRow === row && teleCol === col;\n    });\n  };\n  const getTeleportationDestination = (row, col) => {\n    for (const [teleRow, teleCol] of teleportationSquares) {\n      if (teleRow === row && teleCol === col) {\n        const [destRow, destCol] = teleportationSquares.find(_ref2 => {\n          let [r, c] = _ref2;\n          return r !== row || c !== col;\n        });\n        return [destRow, destCol];\n      }\n    }\n  };\n  const isMagnetSquare = (row, col) => {\n    return magnetSquare.some(magnet => magnet[0] === row && magnet[1] === col);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: renderBoard()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"roll-dice-button\",\n        onClick: movePlayer,\n        disabled: isVictory,\n        children: isVictory ? 'Victory!' : 'Roll Dice'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), rolledNumber && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rolled-number\",\n        children: [\"Rolled Number: \", rolledNumber]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), isVictory && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-message\",\n      children: [\"Congratulations! You reached the stars in \", stepCount, \" steps!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(Board, \"xz48q7bWroDwF/sLeGP3OHCMltE=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Board","_s","boardSize","startingCoordinates","endingCoordinates","teleportationSquares","magnetSquare","playerCoordinates","setPlayerCoordinates","rolledNumber","setRolledNumber","isVictory","setIsVictory","stepCount","setStepCount","playerRow","playerCol","rollDice","number","Math","floor","random","movePlayer","steps","currentRow","currentCol","newRow","newCol","isTeleportationSquare","getTeleportationDestination","isMagnetSquare","magnetIndex","findIndex","magnet","magnetRow","magnetCol","distance","abs","max","setTimeout","row","col","some","_ref","teleRow","teleCol","destRow","destCol","find","_ref2","r","c","className","children","renderBoard","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Banon/Desktop/space-board/src/components/Board.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Board.css';\r\n\r\nconst Board = () => {\r\n  const boardSize = 6;\r\n  const startingCoordinates = [0, 0];\r\n  const endingCoordinates = [boardSize - 1, boardSize - 1];\r\n  const teleportationSquares = [[1, 4], [4, 1]];\r\n  const magnetSquare = [[3, 5], [1, 2]];\r\n\r\n  const [playerCoordinates, setPlayerCoordinates] = useState(startingCoordinates);\r\n  const [rolledNumber, setRolledNumber] = useState(null);\r\n  const [isVictory, setIsVictory] = useState(false);\r\n  const [stepCount, setStepCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const [playerRow, playerCol] = playerCoordinates;\r\n\r\n    if (playerRow >= endingCoordinates[0] && playerCol >= endingCoordinates[1]) {\r\n      setIsVictory(true);\r\n    } else {\r\n      setIsVictory(false);\r\n    }\r\n  }, [playerCoordinates, endingCoordinates]);\r\n\r\n  const rollDice = () => {\r\n    const number = Math.floor(Math.random() * 6) + 1;\r\n    setRolledNumber(number);\r\n    return number;\r\n  };\r\n\r\n  const movePlayer = () => {\r\n    let steps = rollDice();\r\n    const [currentRow, currentCol] = playerCoordinates;\r\n  \r\n    let newRow = currentRow;\r\n    let newCol = currentCol + steps;\r\n  \r\n    if (newCol >= boardSize) {\r\n      newRow += Math.floor(newCol / boardSize);\r\n      newCol %= boardSize;\r\n    }\r\n  \r\n    if (newRow >= boardSize) {\r\n      newRow = boardSize - 1;\r\n      newCol = boardSize - 1;\r\n    }\r\n  \r\n    if (isTeleportationSquare(newRow, newCol)) {\r\n      [newRow, newCol] = getTeleportationDestination(newRow, newCol);\r\n    }\r\n  \r\n    if (isMagnetSquare(newRow, newCol)) {\r\n      const magnetIndex = magnetSquare.findIndex(\r\n        (magnet) => magnet[0] === newRow && magnet[1] === newCol\r\n      );\r\n      if (magnetIndex !== -1) {\r\n        const magnet = magnetSquare[magnetIndex];\r\n        const [magnetRow, magnetCol] = magnet;\r\n        const distance = Math.abs(currentRow - magnetRow) + Math.abs(currentCol - magnetCol);\r\n        steps = Math.max(steps - distance, 1);\r\n        newRow = magnetRow;\r\n        newCol = magnetCol;\r\n      }\r\n    }\r\n  \r\n    // Delay the movement using setTimeout\r\n    setTimeout(() => {\r\n      setPlayerCoordinates([newRow, newCol]);\r\n      setStepCount(stepCount + steps);\r\n    }, 1000); // Set the delay duration in milliseconds (here, 1000ms = 1 second)\r\n  \r\n    // Add a delay before adding the 'moving' class to trigger the animation\r\n    setTimeout(() => {\r\n      setPlayerCoordinates([currentRow, currentCol]); // Move the player to the new position instantly\r\n      setTimeout(() => {\r\n        setPlayerCoordinates([newRow, newCol]); // Move the player to the final position with animation\r\n      }, 0); // Allow a small delay to trigger the animation after the initial position is set\r\n    }, 100); // Set the delay duration in milliseconds (here, 100ms)\r\n  };  \r\n\r\n  const isTeleportationSquare = (row, col) => {\r\n    return teleportationSquares.some(([teleRow, teleCol]) => teleRow === row && teleCol === col);\r\n  };\r\n\r\n  const getTeleportationDestination = (row, col) => {\r\n    for (const [teleRow, teleCol] of teleportationSquares) {\r\n      if (teleRow === row && teleCol === col) {\r\n        const [destRow, destCol] = teleportationSquares.find(([r, c]) => r !== row || c !== col);\r\n        return [destRow, destCol];\r\n      }\r\n    }\r\n  };\r\n\r\n  const isMagnetSquare = (row, col) => {\r\n    return magnetSquare.some((magnet) => magnet[0] === row && magnet[1] === col);\r\n  };\r\n\r\n  \r\n\r\n  return (\r\n    <div className=\"board\">\r\n      <div className=\"game-board\">{renderBoard()}</div>\r\n      <div className=\"button-container\">\r\n        <button\r\n          className=\"roll-dice-button\"\r\n          onClick={movePlayer}\r\n          disabled={isVictory}\r\n        >\r\n          {isVictory ? 'Victory!' : 'Roll Dice'}\r\n        </button>\r\n        {rolledNumber && (\r\n          <div className=\"rolled-number\">Rolled Number: {rolledNumber}</div>\r\n        )}\r\n      </div>\r\n      {isVictory && (\r\n        <div className=\"game-message\">\r\n          Congratulations! You reached the stars in {stepCount} steps!\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}