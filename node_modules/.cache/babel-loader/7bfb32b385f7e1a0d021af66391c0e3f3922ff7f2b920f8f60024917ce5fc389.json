{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Banon\\\\Desktop\\\\space-board\\\\src\\\\components\\\\Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Board.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = () => {\n  _s();\n  const boardSize = 6;\n  const startingCoordinates = [0, 0];\n  const endingCoordinates = [boardSize - 1, boardSize - 1];\n  const teleportationSquares = [[1, 4], [4, 1]];\n  const magnetSquare = [[3, 5], [1, 2]];\n  const [playerCoordinates, setPlayerCoordinates] = useState(startingCoordinates);\n  const [rolledNumber, setRolledNumber] = useState(null);\n  const [isVictory, setIsVictory] = useState(false);\n  const [stepCount, setStepCount] = useState(0);\n  useEffect(() => {\n    const [playerRow, playerCol] = playerCoordinates;\n    if (playerRow >= endingCoordinates[0] && playerCol >= endingCoordinates[1]) {\n      setIsVictory(true);\n    } else {\n      setIsVictory(false);\n    }\n  }, [playerCoordinates, endingCoordinates]);\n  const rollDice = () => {\n    const number = Math.floor(Math.random() * 6) + 1;\n    setRolledNumber(number);\n    return number;\n  };\n  const isTeleportationSquare = (row, col) => {\n    return teleportationSquares.some(_ref => {\n      let [teleRow, teleCol] = _ref;\n      return teleRow === row && teleCol === col;\n    });\n  };\n  const getTeleportationDestination = (row, col) => {\n    for (const [teleRow, teleCol] of teleportationSquares) {\n      if (teleRow === row && teleCol === col) {\n        const [destRow, destCol] = teleportationSquares.find(_ref2 => {\n          let [r, c] = _ref2;\n          return r !== row || c !== col;\n        });\n        return [destRow, destCol];\n      }\n    }\n  };\n  const isMagnetSquare = (row, col) => {\n    return magnetSquare.some(magnet => magnet[0] === row && magnet[1] === col);\n  };\n  const renderBoard = () => {\n    const board = [];\n    for (let row = 0; row < boardSize; row++) {\n      const cells = [];\n      for (let col = 0; col < boardSize; col++) {\n        const isPlayerHere = playerCoordinates[0] === row && playerCoordinates[1] === col;\n        const isStartSquare = startingCoordinates[0] === row && startingCoordinates[1] === col;\n        const isEndSquare = endingCoordinates[0] === row && endingCoordinates[1] === col;\n        const isTeleportSquare = isTeleportationSquare(row, col);\n        const isMagnet = isMagnetSquare(row, col);\n        const cellContent = isPlayerHere ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player-icon\",\n          children: \"\\uD83D\\uDE80\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 44\n        }, this) : null;\n        const cellClass = `cell ${isTeleportSquare ? 'teleport' : ''} ${isStartSquare ? 'start' : ''} ${isEndSquare ? 'end' : ''} ${isMagnet ? 'magnet' : ''}`;\n        cells.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: cellClass,\n          children: cellContent\n        }, `${row}-${col}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this));\n      }\n      board.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: cells\n      }, row, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 18\n      }, this));\n    }\n    return board;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: renderBoard()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"roll-dice-button\",\n        onClick: movePlayer,\n        disabled: isVictory,\n        children: isVictory ? 'Victory!' : 'Roll Dice'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), rolledNumber && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rolled-number\",\n        children: [\"Rolled Number: \", rolledNumber]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), isVictory && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-message\",\n      children: [\"Congratulations! You reached the stars in \", stepCount, \" steps!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(Board, \"xz48q7bWroDwF/sLeGP3OHCMltE=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Board","_s","boardSize","startingCoordinates","endingCoordinates","teleportationSquares","magnetSquare","playerCoordinates","setPlayerCoordinates","rolledNumber","setRolledNumber","isVictory","setIsVictory","stepCount","setStepCount","playerRow","playerCol","rollDice","number","Math","floor","random","isTeleportationSquare","row","col","some","_ref","teleRow","teleCol","getTeleportationDestination","destRow","destCol","find","_ref2","r","c","isMagnetSquare","magnet","renderBoard","board","cells","isPlayerHere","isStartSquare","isEndSquare","isTeleportSquare","isMagnet","cellContent","className","children","fileName","_jsxFileName","lineNumber","columnNumber","cellClass","push","onClick","movePlayer","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Banon/Desktop/space-board/src/components/Board.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Board.css';\r\n\r\nconst Board = () => {\r\n  const boardSize = 6;\r\n  const startingCoordinates = [0, 0];\r\n  const endingCoordinates = [boardSize - 1, boardSize - 1];\r\n  const teleportationSquares = [[1, 4], [4, 1]];\r\n  const magnetSquare = [[3, 5], [1, 2]];\r\n\r\n  const [playerCoordinates, setPlayerCoordinates] = useState(startingCoordinates);\r\n  const [rolledNumber, setRolledNumber] = useState(null);\r\n  const [isVictory, setIsVictory] = useState(false);\r\n  const [stepCount, setStepCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const [playerRow, playerCol] = playerCoordinates;\r\n\r\n    if (playerRow >= endingCoordinates[0] && playerCol >= endingCoordinates[1]) {\r\n      setIsVictory(true);\r\n    } else {\r\n      setIsVictory(false);\r\n    }\r\n  }, [playerCoordinates, endingCoordinates]);\r\n\r\n  const rollDice = () => {\r\n    const number = Math.floor(Math.random() * 6) + 1;\r\n    setRolledNumber(number);\r\n    return number;\r\n  };\r\n\r\n  \r\n\r\n  const isTeleportationSquare = (row, col) => {\r\n    return teleportationSquares.some(([teleRow, teleCol]) => teleRow === row && teleCol === col);\r\n  };\r\n\r\n  const getTeleportationDestination = (row, col) => {\r\n    for (const [teleRow, teleCol] of teleportationSquares) {\r\n      if (teleRow === row && teleCol === col) {\r\n        const [destRow, destCol] = teleportationSquares.find(([r, c]) => r !== row || c !== col);\r\n        return [destRow, destCol];\r\n      }\r\n    }\r\n  };\r\n\r\n  const isMagnetSquare = (row, col) => {\r\n    return magnetSquare.some((magnet) => magnet[0] === row && magnet[1] === col);\r\n  };\r\n\r\n  const renderBoard = () => {\r\n    const board = [];\r\n\r\n    for (let row = 0; row < boardSize; row++) {\r\n      const cells = [];\r\n\r\n      for (let col = 0; col < boardSize; col++) {\r\n        const isPlayerHere = playerCoordinates[0] === row && playerCoordinates[1] === col;\r\n        const isStartSquare = startingCoordinates[0] === row && startingCoordinates[1] === col;\r\n        const isEndSquare = endingCoordinates[0] === row && endingCoordinates[1] === col;\r\n        const isTeleportSquare = isTeleportationSquare(row, col);\r\n        const isMagnet = isMagnetSquare(row, col);\r\n\r\n        const cellContent = isPlayerHere ? <div className=\"player-icon\">ðŸš€</div> : null;\r\n\r\n        const cellClass = `cell ${isTeleportSquare ? 'teleport' : ''} ${isStartSquare ? 'start' : ''} ${\r\n          isEndSquare ? 'end' : ''\r\n        } ${isMagnet ? 'magnet' : ''}`;\r\n\r\n        cells.push(\r\n          <div className={cellClass} key={`${row}-${col}`}>\r\n            {cellContent}\r\n          </div>\r\n        );\r\n      }\r\n\r\n      board.push(<div className=\"row\" key={row}>{cells}</div>);\r\n    }\r\n\r\n    return board;\r\n  };\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      <div className=\"game-board\">{renderBoard()}</div>\r\n      <div className=\"button-container\">\r\n        <button\r\n          className=\"roll-dice-button\"\r\n          onClick={movePlayer}\r\n          disabled={isVictory}\r\n        >\r\n          {isVictory ? 'Victory!' : 'Roll Dice'}\r\n        </button>\r\n        {rolledNumber && (\r\n          <div className=\"rolled-number\">Rolled Number: {rolledNumber}</div>\r\n        )}\r\n      </div>\r\n      {isVictory && (\r\n        <div className=\"game-message\">\r\n          Congratulations! You reached the stars in {stepCount} steps!\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}